<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[单例设计模式]]></title>
    <url>%2F2019%2F03%2F10%2FStatic%E5%85%B3%E9%94%AE%E5%AD%97%2F</url>
    <content type="text"><![CDATA[单例设计模式必须对于多个程序使用同一个配置信息对象时，就需要保证该对象的唯一性。 1.如何保证对象的唯一性 不允许该类创建一个本类实例 对该类创建一个本类实例 对外提供一个方法让其他程序可以获取该对象 2.步骤： 私有化该类构造函数 通过new在本类中创建一个本类对象 定义一个公有的方法，将创建的对象返回 3.例如：新建一个测试类 1234567891011121314151617class Test&#123; private int num; private static Test t = new Test(); //通过new在本类中创建一个本类对象 private Test()&#123;&#125; //私有化构造函数 public static Test getInstance()&#123; //定义一个公有的方法，将创建的对象返回 return t; &#125; public void setNum(int num)&#123; this.num = num; &#125; public int getNum()&#123; return num; &#125; &#125; 如果在main中直接new两个对象 方式1 12345678910class Demo&#123; public static void main(String[] args)&#123; Test t1 = new Test(); Test t2 = new Test(); t1.setNum(10); t2.setNum(20); System.out.println(t1.getNum()); System.out.println(t2.getNum()); &#125;&#125; 输出结果为 121020 未达到内存中只有一个对象的要求 方式212345678910class Demo&#123; public static void main(String[] args)&#123; Test t1 = Test.getInstance(); Test t2 = Test.getInstance(); t1.setNum(10); t2.setNum(20); System.out.println(t1.getNum()); System.out.println(t2.getNum()); &#125;&#125; 输出结果为 122020 利用此方法t1 t2操作的时同一个对象吗，所以满足内存了中只有一个对象的要求 4.饿汉式 （开发时常用） 12345678910 class Single &#123; // 类一加载，对象就已经存在了 private Static Single s = new Single(); private Single()&#123;&#125; public static Single getInstance()&#123; return s; &#125;&#125; 5.懒汉式 (面试时较前者更常问) 12345678910111213 class Single2 &#123; // 类加载进来，没有对象，只有调用了getInstance方法时，才会创建对象 //延迟加载形式 private Static Single2 s = null; private Single2()&#123;&#125; public static Single2 getInstance()&#123; if(s==null) s = new Single2(); return s; &#125;&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>javase</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo创建]]></title>
    <url>%2F2019%2F03%2F09%2Fhexo%E5%88%9B%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[hexo 静态博客1、 安装node.js管理员身份进入cmd首先验证是否安装成功12node -vnpm -v 2、更换源（改为淘宝源） npm install -g cnpm --registry=https://registry.npm.taobao.org键入命令后回车cnpm -v 进行验证 3、使用cnpm 来安装hexo博客框架cnpm install -g hexo-clihexo -v 进行验证 4、新建文件夹blog进入该文件夹，再执行命令mkdir blogcd bloghexo init等待一段时间安装 出现Start blogging with Hwxo!表示安装成功 5、启动博客hexo s浏览器进入 localhost:4000 发现有一个默认创建的文章 6、新建博文hexo n &quot;我的第一篇hexo文章” 7、部署到github上在github里新建一个repostory命名 ！！！！你的用户名.github.io 8、安装插件还是在管理员下 cmd 进入blog目录下cnpm install --save hexo-deployer-git 安装时有个 peerDependencies WARNING 不用管 设置_config.yml 文件 123456 # Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: https://github.com/shuisuinian/shuisuinian.github.io.git banch: maste 推送到github hexo d 9、更换主题 git clone https://github.com/litten/hexo-theme-yilia.git. themes/yilia 修改 之前的_config.yml 找到 theme 这行 修改为theme: yilia 执行以下命令1234hexo cleanhexo ghexo shexo d 10、排除错误缺失模块。1、请确保node版本大于6.22、在博客根目录（注意不是yilia根目录）执行以下命令：cnpm i hexo-generator-json-content –save3、在根目录_config.yml里添加配置： jsonContent: meta: false pages: false posts: title: true date: true path: true text: false raw: false content: false slug: false updated: false comments: false link: false permalink: false excerpt: false categories: false tags: true]]></content>
      <categories>
        <category>Hello World</category>
      </categories>
      <tags>
        <tag>hexo博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F03%2F08%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>Hello World</category>
      </categories>
      <tags>
        <tag>Hello World</tag>
      </tags>
  </entry>
</search>
